(window.webpackJsonp=window.webpackJsonp||[]).push([[121],{447:function(s,a,n){"use strict";n.r(a);var e=n(4),t=Object(e.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"dc"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dc"}},[s._v("#")]),s._v(" dc")]),s._v(" "),a("p",[s._v("任意精度计算器")]),s._v(" "),a("h2",{attrs:{id:"说明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#说明"}},[s._v("#")]),s._v(" 说明")]),s._v(" "),a("p",[s._v("dc 是一款逆波兰表达式计算器，支持无限制精度的算术运算。它还允许您定义和调用宏。通常，dc从标准输入读取，也可以通过参数传入文件来求值。")]),s._v(" "),a("h2",{attrs:{id:"语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#语法"}},[s._v("#")]),s._v(" 语法")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("dc")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("选项"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("文件"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h3",{attrs:{id:"选项"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#选项"}},[s._v("#")]),s._v(" 选项")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("-e, "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--expression")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("EXPR    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 评估表达式")]),s._v("\n-f, "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--file")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("FILE          "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 评估文件内容")]),s._v("\n-h, "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--help")]),s._v("               "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 显示此帮助并退出")]),s._v("\n-V, "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--version")]),s._v("            "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 输出版本信息并退出")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("p 打印堆栈顶部的值并以换行符结束语句。\nn 打印堆栈顶部的值并以空语句结束行。\nf 打印整个堆栈，不做任何更改。\nP 从栈顶弹出值。\nc 清除堆栈。\nd 复制顶部值并将其推入主堆栈。\nr 反转堆栈中顶部两个元素的顺序。\nZ 从堆栈中弹出值，计算其中的位数并压入该数字。\nX 从堆栈中弹出值，计算其中的小数位数并压入该数字。\nz 将堆栈长度推入堆栈。\ni 从堆栈中弹出值并将其用作输入基数。\no 从堆栈中弹出值并将其用作输出基数。\nk 从堆栈中弹出值并使用它来设置精度。\nI 将输入基数的值推入堆栈。\nO 将输出基数的值压入堆栈\nK 将精度值压入堆栈。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br")])]),a("h2",{attrs:{id:"示例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#示例"}},[s._v("#")]),s._v(" 示例")]),s._v(" "),a("p",[s._v("下面是 "),a("code",[s._v("dc")]),s._v(" 命令在命令行完成的计算 "),a("code",[s._v("10 * 10")]),s._v(" 得出结果 "),a("code",[s._v("100")]),s._v("，并推出的过程")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("dc")]),s._v("        \n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("          "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 1. 输入数字10")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("          "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 2. 输入数字10")]),s._v("\n*           "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 3. 输入运算类型*表示乘")]),s._v("\np           "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 4. 输入p得到计算结果")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v("\nq           "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 5. 输入 q 退出 dc")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("示例显示在命令行结果 "),a("code",[s._v("509")])]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("dc")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--expression")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"50 10 * 9 + p"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("509")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h2",{attrs:{id:"支持的运算"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#支持的运算"}},[s._v("#")]),s._v(" 支持的运算")]),s._v(" "),a("p",[a("code",[s._v("+")]),s._v(" 从堆栈中弹出两个值，将它们相加，然后压栈结果。")]),s._v(" "),a("p",[a("code",[s._v("-")]),s._v(" 弹出两个值，从弹出的第二个值中减去弹出的第一个值，并压栈结果。")]),s._v(" "),a("p",[a("code",[s._v("*")]),s._v(" 弹出两个值，将它们相乘，然后压栈结果。结果中分数位数取决于当前精度值和两个参数中的分数位数。")]),s._v(" "),a("p",[a("code",[s._v("/")]),s._v(" 弹出两个值，将弹出的第二个值与弹出的第一个值相除，然后推送结果。分数位数由精度值指定。")]),s._v(" "),a("p",[a("code",[s._v("%")]),s._v(" 弹出两个值，计算/命令将执行的除法的剩余部分，并推送该值。计算的值与序列 "),a("code",[s._v("Sd dld/Ld*-")]),s._v("计算的值相同。")]),s._v(" "),a("p",[a("code",[s._v("~")]),s._v(" 弹出两个值，将弹出的第二个值与弹出的第一个值相除。首先推送商，然后推送余数。除法中使用的小数位数由精度值指定。")]),s._v(" "),a("p",[s._v("（序列 SdSn lnld/lnld% 也可以完成此功能，但错误检查略有不同。）")]),s._v(" "),a("p",[a("code",[s._v("^")]),s._v(" 使用弹出的第一个值作为指数，第二个值作为基数，弹出两个值并进行幂运算。忽略指数的分数部分。")]),s._v(" "),a("p",[a("code",[s._v("|")]),s._v(" 弹出三个值并计算模幂。 弹出的第一个值用作约简模数； 这个值必须是一个非零数字，并且应该是一个整数。 弹出的第二个用作指数； 该值必须是非负数，并且该指数的任何小数部分都将被忽略。 弹出的第三个值是取幂的基数，它应该是一个整数。 对于小整数，这类似于序列 Sm^Lm%，但与 ^ 不同的是，此命令适用于任意大的指数。")]),s._v(" "),a("p",[a("code",[s._v("v")]),s._v(" 弹出一个值，计算其平方根，然后压栈它。精度值的最大值和参数的精度用于确定结果中的小数位数。")])])}),[],!1,null,null,null);a.default=t.exports}}]);