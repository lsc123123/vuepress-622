(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{317:function(t,a,s){t.exports=s.p+"assets/img/image-20240704234323935.b609f46f.png"},318:function(t,a,s){t.exports=s.p+"assets/img/image-20240704234459326.24648517.png"},319:function(t,a,s){t.exports=s.p+"assets/img/image-20240704234645842.12b8d938.png"},320:function(t,a,s){t.exports=s.p+"assets/img/image-20240704234654343.23ffe481.png"},321:function(t,a,s){t.exports=s.p+"assets/img/image-20240704234752680.45c93f25.png"},322:function(t,a,s){t.exports=s.p+"assets/img/image-20240704235145393.b1a1a7c7.png"},323:function(t,a,s){t.exports=s.p+"assets/img/image-20240704235503192.5fcf7384.png"},324:function(t,a,s){t.exports=s.p+"assets/img/image-20240704235609695.895bd263.png"},325:function(t,a,s){t.exports=s.p+"assets/img/image-20240704235644047.e0fd926e.png"},326:function(t,a,s){t.exports=s.p+"assets/img/image-20240705000020816.87da7caf.png"},327:function(t,a,s){t.exports=s.p+"assets/img/image-20240705211922373.8e98a915.png"},328:function(t,a,s){t.exports=s.p+"assets/img/image-20240705212435800.0eff09ab.png"},329:function(t,a,s){t.exports=s.p+"assets/img/image-20240705212620660.f182df4a.png"},330:function(t,a,s){t.exports=s.p+"assets/img/image-20240705212709370.d4a714bb.png"},331:function(t,a,s){t.exports=s.p+"assets/img/image-20240705212845441.a2591565.png"},332:function(t,a,s){t.exports=s.p+"assets/img/image-20240705213030771.deef80b1.png"},333:function(t,a,s){t.exports=s.p+"assets/img/image-20240705213508470.c7905c41.png"},334:function(t,a,s){t.exports=s.p+"assets/img/image-20240705213907559.b3449e38.png"},335:function(t,a,s){t.exports=s.p+"assets/img/image-20240705214006167.220c3dc6.png"},336:function(t,a,s){t.exports=s.p+"assets/img/image-20240705214523454.6d7bff23.png"},337:function(t,a,s){t.exports=s.p+"assets/img/image-20240705214732127.a0070748.png"},338:function(t,a,s){t.exports=s.p+"assets/img/image-20240705214812436.424a68c4.png"},339:function(t,a,s){t.exports=s.p+"assets/img/image-20240705214901589.6ecbff9c.png"},340:function(t,a,s){t.exports=s.p+"assets/img/image-20240705214935792.6ca1c100.png"},341:function(t,a,s){t.exports=s.p+"assets/img/image-20240705215845151.4b02b00e.png"},342:function(t,a,s){t.exports=s.p+"assets/img/image-20240705215905013.57ac2fae.png"},343:function(t,a,s){t.exports=s.p+"assets/img/image-20240705215940472.960350b6.png"},344:function(t,a,s){t.exports=s.p+"assets/img/image-20240705215957924.82ea958b.png"},345:function(t,a,s){t.exports=s.p+"assets/img/image-20240705220015673.efef425a.png"},346:function(t,a,s){t.exports=s.p+"assets/img/image-20240705220113043.78e40c07.png"},347:function(t,a,s){t.exports=s.p+"assets/img/image-20240705220158073.02f754aa.png"},966:function(t,a,s){"use strict";s.r(a);var e=s(4),i=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("文件版本")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("修订日期")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("修订内容")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("作者")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("v1.0")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("2024/7/4")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("项目代码管理流程")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("李思聪")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}}),t._v(" "),a("td",{staticStyle:{"text-align":"center"}}),t._v(" "),a("td",{staticStyle:{"text-align":"center"}}),t._v(" "),a("td",{staticStyle:{"text-align":"center"}})])])]),t._v(" "),a("h2",{attrs:{id:"一、背景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、背景"}},[t._v("#")]),t._v(" 一、背景")]),t._v(" "),a("p",[t._v("​\t在622团队中，项目工程代码往往由多人共同协作开发，因此我们需要一个清晰的代码管理流程，能够很好的管理每个人的代码，也能够更好的提高实际开发效率。")]),t._v(" "),a("h2",{attrs:{id:"二、目标"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、目标"}},[t._v("#")]),t._v(" 二、目标")]),t._v(" "),a("p",[t._v("​\t1、学习、熟练、掌握Git版本管理工具，养成良好的编程习惯")]),t._v(" "),a("p",[t._v("​\t2、建立622团队项目工程代码管理流程。")]),t._v(" "),a("h2",{attrs:{id:"三、什么是git"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、什么是git"}},[t._v("#")]),t._v(" 三、什么是Git")]),t._v(" "),a("p",[t._v("​\tgit是个"),a("a",{attrs:{href:"https://so.csdn.net/so/search?q=%E5%88%86%E5%B8%83%E5%BC%8F&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"}},[t._v("分布式"),a("OutboundLink")],1),t._v("版本管理工具，它可以在任何时间点，将文档的状态作为更新记录保存起来，也可以在任何时间点，将更新记录恢复回来。在开发中，Git已成为现在主流的一种代码托管技术（版本管理工具），基本上大多数的公司都在使用Git进行协同开发。很多代码托管平台也是基于Git来实现的。")]),t._v(" "),a("h2",{attrs:{id:"四、git的使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四、git的使用"}},[t._v("#")]),t._v(" 四、Git的使用")]),t._v(" "),a("p",[t._v("​\t在622团队嵌入式项目开发，我们选用Git作为我们的版本管理工具，详细的命令使用这里不多叙述，网上资料比较齐全，自行百度学习。")]),t._v(" "),a("h2",{attrs:{id:"五、主仓库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#五、主仓库"}},[t._v("#")]),t._v(" 五、主仓库")]),t._v(" "),a("p",[t._v("​\t由于考虑目前我们仍然处于学生学习阶段，我们使用Github来管理我们的项目代码。")]),t._v(" "),a("p",[t._v("仓库地址：")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("https://github.com/lsc123123/ZHKU_INNOV_622/\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("h3",{attrs:{id:"_1-创建项目分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-创建项目分支"}},[t._v("#")]),t._v(" 1.创建项目分支")]),t._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"image-20240704234323935","data-src":s(317),loading:"lazy"}})]),t._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"image-20240704234459326","data-src":s(318),loading:"lazy"}})]),t._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"image-20240704234645842","data-src":s(319),loading:"lazy"}})]),t._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"image-20240704234654343","data-src":s(320),loading:"lazy"}})]),t._v(" "),a("p",[t._v("​\t在创建完项目分支之后，可以看到这里已经出现我们的项目分支了，我们可以通过点击这个分支切换到这个xxx_project项目分支：")]),t._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"image-20240704234752680","data-src":s(321),loading:"lazy"}})]),t._v(" "),a("p",[t._v("​\t这里为了演示不同分支的区别，我切换到xxx_project分支后，修改了这个分支下的README.md文件的内容：")]),t._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"image-20240704235145393","data-src":s(322),loading:"lazy"}})]),t._v(" "),a("p",[t._v("​\t回到主分支页面：")]),t._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"image-20240704235503192","data-src":s(323),loading:"lazy"}})]),t._v(" "),a("p",[t._v("​\t点开README.md文件，可以看到以下内容：")]),t._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"image-20240704235609695","data-src":s(324),loading:"lazy"}}),t._v("\t\t然后再切换到项目分支xxx_project：")]),t._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"image-20240704235644047","data-src":s(325),loading:"lazy"}})]),t._v(" "),a("p",[t._v("​\t可以看到内容已经发生了变化。"),a("strong",[t._v("结论")]),t._v("：每个分支的东西是独立的，主分支main可以有很多的子分支，其次每个子分支可以再有很多子分支，整个622团队是主分支，各个项目组又有自己独立的项目子分支（相对于main分支），而项目组成员可以再基于项目分支去创建属于自己的子分支。")]),t._v(" "),a("h3",{attrs:{id:"_2-创建个人分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-创建个人分支"}},[t._v("#")]),t._v(" 2.创建个人分支")]),t._v(" "),a("p",[t._v("​\t1、个人分支的用途：在项目代码开发的过程中，你可以将自己的代码修改提交到你的远程个人分支上（小改了一下但是并未完成某个功能点），但是一般远程个人分支用于提交代码（已经完成某个功能点，并自身已对代码进行审查）的时候。")]),t._v(" "),a("p",[t._v("​\t2、个人分支的创建：方法1：远程个人分支创建方式与项目分支一样，只是在创建的时候，Soure需要选择到你所负责的项目分支。")]),t._v(" "),a("p",[t._v("​\t\t\t\t\t\t\t\t\t\t方法2：无需在Github上创建，在本地push到远程时即可自动创建。")]),t._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"image-20240705000020816","data-src":s(326),loading:"lazy"}})]),t._v(" "),a("h2",{attrs:{id:"六、git-commit规范"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#六、git-commit规范"}},[t._v("#")]),t._v(" 六、Git Commit规范")]),t._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("提交类型"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(": "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("主题"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" \n\n 影响范围:\n 修改描述:\n 自测结果:\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 提交类型:（必填）")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   字段选择如下:")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#     Feature：新功能（feature）")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#     Fix：修复bug ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#     Refactor：重构")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#     Perf: 性能改善")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#     Chore: 其他修改, 杂项")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#    Commit目的的简短描述，不少于5个字符，不超过50个字符, 即 What")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 修改描述(开头空两格):")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#    对本次Commit的详细描述，可以分成多行, 即 Why and How，若修改简短，可忽略不写.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 影响范围:（必填，开头空两格）")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#      用于说明 修改影响的功能范围")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 自测结果(开头空两格)：")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#    确认是否已自测，提交前需要本地进行编译、烧录、测试, !!!禁止未测试的代码提交!!!")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#    根据实际情况，可填写：“已烧录自测”、“无法自测”、“自测通过”")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br")])]),a("h2",{attrs:{id:"七、代码审查与提交流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#七、代码审查与提交流程"}},[t._v("#")]),t._v(" 七、代码审查与提交流程")]),t._v(" "),a("p",[t._v("​\t"),a("span",{staticStyle:{"background-color":"yellow"}},[t._v("【强制】")]),t._v("在仓库中，主分支不允许有如何的代码提交操作，所有项目代码的开发，最后均上传合并的各项目组的项目分支。")]),t._v(" "),a("h3",{attrs:{id:"_1-代码审查"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-代码审查"}},[t._v("#")]),t._v(" 1.代码审查")]),t._v(" "),a("p",[t._v("​\t代码审查遵循以下流程规则：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("防线")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("责任人")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("负责工作")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("第一道防线")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("开发者本人")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("在功能点实现完成后，应当进行烧录自测，和代码的重新审查，逻辑重新梳理，防止出现BUG")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("第二道防线")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("项目组负责人或成员")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("在开发者本人经过第一道防线后，提交代码到临时分支，项目组负责人或成员需要对其代码进行二次审查，审查没问题后将代码合并到项目分支")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}}),t._v(" "),a("td",{staticStyle:{"text-align":"center"}}),t._v(" "),a("td",{staticStyle:{"text-align":"center"}})])])]),t._v(" "),a("p",[t._v("​\t在某个功能节点的代码开发结束后，首先开发者本人要对代码进行重新审查，确保代码逻辑、代码规范等符合要求，在自审核结束后，进入到第二道审查。")]),t._v(" "),a("p",[t._v("​\t项目组负责人或成员通过开发者提供的diff，进行代码复审。（diff可以简单理解为代码的变化，上一次跟这一次的区别）")]),t._v(" "),a("h3",{attrs:{id:"_2-代码提交"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-代码提交"}},[t._v("#")]),t._v(" 2.代码提交")]),t._v(" "),a("p",[t._v("​\t在开发者完成代码审查后，将代码提交到自己的个人分支，提交Commit必须遵循Commit规范。在代码提交到个人分支后，提供diff链接到项目组负责人或者审查成员进行第二重审查，再三确认无误后，再将代码从个人分支合并到主分支（合并结束后，确保个人分支被删除）")]),t._v(" "),a("p",[t._v("​\t"),a("strong",[t._v("示例：")])]),t._v(" "),a("p",[t._v("​\t假设当前有个项目的项目分支名为xxx_project：")]),t._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"image-20240705211922373","data-src":s(327),loading:"lazy"}})]),t._v(" "),a("p",[t._v("​\t打开git终端（windows系统），克隆远程仓库到本地仓库后：")]),t._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"image-20240705212435800","data-src":s(328),loading:"lazy"}})]),t._v(" "),a("p",[t._v("​\t此时我们需要创建一个本地分支并且关联远程的xxx_project项目分支：")]),t._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"image-20240705212620660","data-src":s(329),loading:"lazy"}})]),t._v(" "),a("p",[t._v("​\t此时，再次查看本地分支，就可以看到已经创建好并关联成功远程分支了：")]),t._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"image-20240705212709370","data-src":s(330),loading:"lazy"}})]),t._v(" "),a("p",[t._v("​\t什么是关联？大概意思就是你在本地创建了个分支，并且同步远程分支的所有内容到你的本地分支上。当你ls查看文件列表的时候，你所看到的README.md是远程分支xxx_project的README.md文件，并不是主分支main中的README.md文件。")]),t._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"image-20240705212845441","data-src":s(331),loading:"lazy"}})]),t._v(" "),a("p",[t._v("​\t这个时候我们进行项目代码的开发，假设我完成了wifi的功能，如下图wifi.c文件")]),t._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"image-20240705213030771","data-src":s(332),loading:"lazy"}})]),t._v(" "),a("p",[t._v("​\t这个时候可以输入指令：")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git status\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("​\t查看当前的修改状态，你就会发现有一个红色的wifi.c，这个意思就是说，当前分支修改了wifi.c文件，还没加入暂存区。这个时候，开发者应该重新对wifi.c这个文件进行审查，看代码逻辑等等有没有问题，会不会导致出现BUG。审查结束后，输入指令:")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git add\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("​\t将修改的文件加入到暂存区（"),a("strong",[t._v("注意！！在加入到暂存区之前一定要通过烧录进行自测，写的功能能够正常运行后才能加入到暂存区")]),t._v("），并且再次git status查看状态，你就会发现，红色的wifi.c变成了绿色：")]),t._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"image-20240705213508470","data-src":s(333),loading:"lazy"}})]),t._v(" "),a("p",[t._v("​\t加入到暂存区后，我们还需要将暂存区中的代码提交到本地分支。")]),t._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"image-20240705213907559","data-src":s(334),loading:"lazy"}})]),t._v(" "),a("p",[t._v("​\t这个时候代码就已经提交到本地分支中了，我们可以通过以下指令查看提交记录：")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git log\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"image-20240705214006167","data-src":s(335),loading:"lazy"}})]),t._v(" "),a("p",[t._v("​\t代码提交到本地分支后，需要push到远程的个人分支中"),a("span",{staticStyle:{"background-color":"yellow"}},[t._v("（注意！！是个人分支，不要直接提交到项目分支或者主分支）")])]),t._v(" "),a("p",[t._v("​\t执行以下指令，即可push到远程个人分支（这个远程个人分支会自动创建，无需自行创建）：")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git push origin xxx_project:xxx_lsc_temp\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"image-20240705214523454","data-src":s(336),loading:"lazy"}})]),t._v(" "),a("p",[t._v("​\t打开Github，进入到主仓库，你就可以看到有远程个人分支的相关东西了：")]),t._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"image-20240705214732127","data-src":s(337),loading:"lazy"}})]),t._v(" "),a("p",[t._v("​\t这个时候选择你刚刚创建的个人分支，就可以看到刚刚的wifi.c文件了：")]),t._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"image-20240705214812436","data-src":s(338),loading:"lazy"}})]),t._v(" "),a("p",[t._v("​\t点击如图的地方：")]),t._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"image-20240705214901589","data-src":s(339),loading:"lazy"}})]),t._v(" "),a("p",[t._v("​\t在红框的位置，可以看到此时提交对代码做出的所有修改，这也是项目负责人或成员的第二道审查的地方，通过这里去看提交者的代码修改是否存在问题，存在问题则告知提交者，进行修改。")]),t._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"image-20240705214935792","data-src":s(340),loading:"lazy"}})]),t._v(" "),a("p",[t._v("​\t项目负责人或成员检查无误后，负责分支合并（这个远程个人分支合并到项目分支中），首先一定要选择对合并目标分支为项目分支：")]),t._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"image-20240705215845151","data-src":s(341),loading:"lazy"}})]),t._v(" "),a("p",[t._v("​\t无误后，创建合并请求：")]),t._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"image-20240705215905013","data-src":s(342),loading:"lazy"}})]),t._v(" "),a("p",[t._v("​\t这里可以更具体的描述此次修改的内容：")]),t._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"image-20240705215940472","data-src":s(343),loading:"lazy"}})]),t._v(" "),a("p",[t._v("​\t然后即可创建合并请求：")]),t._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"image-20240705215957924","data-src":s(344),loading:"lazy"}})]),t._v(" "),a("p",[t._v("​\t随即Merge即可：")]),t._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"image-20240705220015673","data-src":s(345),loading:"lazy"}})]),t._v(" "),a("p",[t._v("​\t在合并完成后，会自动删除一开始创建的远程个人分支：")]),t._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"image-20240705220113043","data-src":s(346),loading:"lazy"}})]),t._v(" "),a("p",[t._v("​\t再回到项目分支中，就可以看到合并过来的代码了：")]),t._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"image-20240705220158073","data-src":s(347),loading:"lazy"}})]),t._v(" "),a("p",[t._v("​\t至此整个流程结束。")]),t._v(" "),a("h2",{attrs:{id:"八、注意事项"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#八、注意事项"}},[t._v("#")]),t._v(" 八、注意事项")]),t._v(" "),a("p",[t._v("​\t由于目前仓库未设定Commit规范的检验、合并规则、以及仓库权限规则等这些东西，所以一切操作"),a("strong",[t._v("请谨慎再谨慎")]),t._v("，特别是代码提交、合并的步骤一定要正确，并且各团队成员不能随意删除仓库内的分支（个人分支除外）。")]),t._v(" "),a("p",[t._v("​\t还有一点也非常重要，就是备份。除了远程仓库的存储之外，各成员的本地仓库也要留有备份，不要随意删除。最好有专门团队成员负责定期对远程仓库重要版本代码进行本地备份。")])])}),[],!1,null,null,null);a.default=i.exports}}]);